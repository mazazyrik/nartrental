import asyncio
import hmac
import hashlib
import json
import requests
from fastapi import FastAPI, Request, HTTPException, Header
from pydantic import BaseModel

app = FastAPI(title='NartRental Bot API')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NOTIFY_SECRET = 'dev-secret-change-in-production'
BOT_API_URL = 'http://localhost:8002'  # URL –¥–ª—è —Å–≤—è–∑–∏ —Å –±–æ—Ç–æ–º

print(f'üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...')
print(f'üîë NOTIFY_SECRET: {NOTIFY_SECRET[:10]}...')
print(f'ü§ñ BOT_API_URL: {BOT_API_URL}')


class OrderNotification(BaseModel):
    order_id: int
    product: str
    price: int
    customer_name: str
    customer_phone: str
    comment: str
    created_at: str
    section: str | None = None


@app.get('/ping')
async def ping():
    return {
        'message': 'pong',
        'service': 'FastAPI',
        'bot_url': BOT_API_URL
    }


@app.post('/notify/new-order')
async def notify_new_order(
    order: OrderNotification,
    request: Request,
    x_signature: str = Header(None)
):
    if not x_signature:
        raise HTTPException(status_code=400, detail='Missing signature')

    body = await request.body()
    expected_signature = hmac.new(
        NOTIFY_SECRET.encode(),
        body,
        hashlib.sha256
    ).hexdigest()

    if not hmac.compare_digest(x_signature, expected_signature):
        raise HTTPException(status_code=401, detail='Invalid signature')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
    message_text = f'''üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.order_id}
–¢–æ–≤–∞—Ä: {order.product}
–†–∞–∑–¥–µ–ª: {order.section or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–¶–µ–Ω–∞: {order.price // 100} ‚ÇΩ
–ò–º—è: {order.customer_name}
–¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}'''

    if order.comment:
        message_text += f'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HTTP API –±–æ—Ç–∞
    try:
        response = requests.post(
            f'{BOT_API_URL}/send-notification',
            json={'message': message_text},
            timeout=5
        )

        if response.status_code == 200:
            result = response.json()
            print(f'‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result}')
            return {'message': 'Notification sent successfully'}
        else:
            print(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}')
            return {'message': 'Failed to send notification'}

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –±–æ—Ç–æ–º: {e}')
        return {'message': 'Bot communication error'}

if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host='0.0.0.0', port=8001)
